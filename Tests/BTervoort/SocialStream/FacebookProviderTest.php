<?php

namespace BTervoort\SocialStream;

use DateTime;
use Facebook\Facebook;
use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-17 at 13:33:32.
 */
class FacebookProviderTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var FacebookProvider
     */
    protected $object;
    private $fb;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->fb = $this->getMock(Facebook::class, [], [[
            'app_id' => '896514027053080',
            'app_secret' => '555635289cd0bfcd2f62f12e6a34f71a',
            'default_graph_version' => 'v2.5',
        ]]);
        $this->object = new FacebookProvider($this->fb, '570201843049662', 7, 
                '896514027053080|uS8Bv6eZCJbMKOMS0j4CudpFKPY');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers BTervoort\SocialStream\FacebookProvider::readStream
     * @todo   Implement testReadStream().
     */
    public function testReadStream() {
        $datea = new DateTime('-1 minute');
        $dateb = new DateTime('-2 minute');
        
        $reponse = $this->getMockBuilder(\Facebook\FacebookResponse::class)
            ->disableOriginalConstructor()->getMock();
        $reponse->expects($this->once())
            ->method('getDecodedBody')
            ->willReturn( ['data' => [
                ['created_time' => $datea->format(DateTime::ATOM), 'message' => "hello\ntest", 'id' => '1'],
                ['created_time' => $dateb->format(DateTime::ATOM), 'message' => "hello world", 'id' => '2']
            ]] );
        
        $this->fb->expects($this->once())
                ->method('get')
                ->with($this->equalTo('/570201843049662/posts?limit=7'), 
                        $this->equalTo('896514027053080|uS8Bv6eZCJbMKOMS0j4CudpFKPY'))
                ->willReturn($reponse);
        
        $result = $this->object->readStream();
        $this->assertEquals([
            new GenericPost($datea, 'hello', 'https://www.facebook.com/1', 'facebook'),
            new GenericPost($dateb, 'hello world', 'https://www.facebook.com/2', 'facebook'),
        ], $result);
    }

}


