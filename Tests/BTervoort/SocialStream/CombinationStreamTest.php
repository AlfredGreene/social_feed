<?php

namespace Tests\Btervoort\SocialStream;

use BTervoort\SocialStream\CombinationStream;
use BTervoort\SocialStream\IStreamPost;
use BTervoort\SocialStream\IStreamProvider;
use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-15 at 19:29:39.
 */
class CombinationStreamTest extends PHPUnit_Framework_TestCase {

    /**
     * @var CombinationStream
     */
    protected $object;
    protected $providerA;
    protected $providerB;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new CombinationStream;
        
        $this->providerA = $this->getMockForAbstractClass(IStreamProvider::class);
        $this->object->addProvider($this->providerA);
        $this->providerB = $this->getMockForAbstractClass(IStreamProvider::class);
        $this->object->addProvider($this->providerB);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Btervoort\SocialStream\CombinationStream::addProvider
     * i expect addprovider to add a provider to the list
     */
    public function testAddProvider() {
        $provider = $this->getMockForAbstractClass(IStreamProvider::class);
        $this->object->addProvider($provider);
        $this->assertTrue($this->object->containsProvider($provider));
    }
    
    /**
     * @covers Btervoort\SocialStream\CombinationStream::removeProvider
     * i expect remove provider to remove the provider from the list
     */
    public function testRemoveProvider() {
        $this->object->removeProvider($this->providerA);
        $this->assertFalse( $this->object->containsProvider($this->providerA));
    }

    /**
     * @covers Btervoort\SocialStream\CombinationStream::readStream
     * I expect the provider to be called and the result sorted by date
     */
    public function testReadStream() {
        $postA = $this->getMockForAbstractClass(IStreamPost::class);
        $postA->expects($this->any())
                ->method('getDate')
                ->willReturn(new \DateTime('-1 min'));
        $postB = $this->getMockForAbstractClass(IStreamPost::class);
        $postB->expects($this->any())
                ->method('getDate')
                ->willReturn(new \DateTime('-2 min'));
        $postC = $this->getMockForAbstractClass(IStreamPost::class);
        $postC->expects($this->any())
                ->method('getDate')
                ->willReturn(new \DateTime('-3 min'));
        $postD = $this->getMockForAbstractClass(IStreamPost::class);
        $postD->expects($this->any())
                ->method('getDate')
                ->willReturn(new \DateTime('-4 min'));
        
        $this->providerA->expects($this->once())
                ->method('readStream')
                ->willReturn([$postA, $postC]);
        $this->providerB->expects($this->once())
                ->method('readStream')
                ->willReturn([$postB, $postD]);
        
        $result = $this->object->readStream();
        
        $resulting_dates = array_map(function ($e) { 
            return $e->getDate(); 
        }, $result);
        
        $this->assertEquals([
            $postA->getDate(), 
            $postB->getDate(), 
            $postC->getDate(), 
            $postD->getDate()
        ], $resulting_dates );
    }

}
