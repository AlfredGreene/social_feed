<?php

namespace Tests\BTervoort\SocialStream;

use BTervoort\SocialStream\GenericPost;
use BTervoort\SocialStream\TwitterPost;
use BTervoort\SocialStream\TwitterProvider;
use DateTime;
use PHPUnit_Framework_TestCase;
use TwitterAPIExchange;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-16 at 21:01:25.
 */
class TwitterProviderTest extends PHPUnit_Framework_TestCase {

    /**
     * @var TwitterProvider
     */
    protected $object;
    private $twitterAPIExchange;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->twitterAPIExchange = $this->getMock(TwitterAPIExchange::class, [], [[
            'consumer_key' => '9LTTtMuJjbyIFNtICcMFIOtLd',
            'consumer_secret' => 'FOgDNnUZCVKGrQMXc6e2lDfz9PTjaWjrHedma8tizfueWtmjZZ',
            'oauth_access_token' => '19020198-MEFB7DBCrMx7tAtgLbjT7nto7qrHoYLfAFGWXuvk7',
            'oauth_access_token_secret' => 'S7ImcmBJVrFskSTU2YVhO9LONJzOAmekU53a6VbIYHNzx',
        ]]);
        $this->object = new TwitterProvider($this->twitterAPIExchange, 
            ['user_id' => '319525252', 'count' => 5]);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers BTervoort\SocialStream\TwitterProvider::readStream
     * @todo   Implement testReadStream().
     */
    public function testReadStream() {
        $this->twitterAPIExchange->expects($this->once())
                ->method('setGetfield')
                ->with($this->equalTo('?user_id=319525252&count=5&trim_user=1&exclude_replies=1&contributor_details=0'))
                ->willReturnSelf();
        
        $this->twitterAPIExchange->expects($this->once())
                ->method('buildOauth')
                ->with($this->equalTo('https://api.twitter.com/1.1/statuses/user_timeline.json'), 
                        $this->equalTo('GET'))
                ->willReturnSelf();
        $datea = new DateTime('-1 minute');
        $dateb = new DateTime('-2 minute');
        $this->twitterAPIExchange->expects($this->once())
                ->method('performRequest')
                ->with($this->equalTo(true), 
                        $this->equalTo([
                            CURLOPT_SSL_VERIFYHOST => false,
                            CURLOPT_SSL_VERIFYPEER => 0,
                        ]))
                ->willReturn(json_encode([
                    ['id' => '1', 'text'=> 'tty', 'created_at' => $datea->format(\DateTime::RFC1036)],
                    ['id' => '2', 'text'=> 'tty2', 'created_at' => $dateb->format(\DateTime::RFC1036)]
                ]));
        
        $this->assertEquals([
            new GenericPost($datea, 'tty', 'https://twitter.com/statuses/1', 'twitter'),
            new GenericPost($dateb, 'tty2', 'https://twitter.com/statuses/2', 'twitter'),
        ], $this->object->readStream());
    }

}
